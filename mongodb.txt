1. windows安装服务
mongod --logpath "D:\Program Files\mongodb\data\logs.txt" --logappend --dbpath "D:\Program Files\mongodb\data" --directoryperdb --serviceName "MongoDB" --serviceDisplayName "MongoDB" --install


mongod.exe --bind_ip yourIPadress --logpath "C:\data\dbConf\mongodb.log" 
--logappend --dbpath "C:\data\db" --port yourPortNumber 
--serviceName "YourServiceName" --serviceDisplayName "YourServiceName" --install

2. 术语
SQL术语/概念	MongoDB术语/概念	解释/说明
database		database			数据库
table			collection			数据库表/集合
row				document			数据记录行/文档
column			field				数据字段/域
index			index				索引
table 			joins	 			表连接,MongoDB不支持
primary key		primary key			主键,MongoDB自动将_id字段设置为主键

表联合			嵌入文档


3. 术语介绍

	1) document 文档
	
	* 使用key/value 存储数据，可以存储字符串，或其他document
	* key/value 有序
	* 区分类型和大小写
	* 不能有重复key
	* key 是字符串，不能有（\0 空字符 、 .  、 $ 、 以_开头)
	

	2) collection 集合
	
	* document的集合，对文档格式没有限制
	* capped collection : 固定大小的collection , 性能高、队列过期的特性
	
4. 数据类型

	* String ： utf-8编码
	* Inteer : 整型
	* Boolean ： 布尔值
	* Double ：  双精度浮点值
	* Min/Max keys : 将一个值与BSON（二进制的JSON）元素的最低值
	* Arrays : 存多个数组、列表、值
	* Timestamp : 时间戳 ， 记录添加修改的时间
	* Object : 内嵌文档
	* Null : 用于创建空值
	* Symbol : 符号 ， 基本等于字符串类型
	* Date : 日期时间						"date" : ISODate("2017-01-01T00:12:21")
	* Obbject ID : 对象id,  用于文档id
	* Binary Data : 二进制数据
	* Code : 存储js代码
	* Regular expression : 正则表达式

	
	
	
5. 创建库
	* 创建 : use dbname
	* 查看当前使用的库 : db
	* 查所有库名 : show dbs 
	* 插入数据 : db.collectionName.insert({"key":"value"})
	* 删除库 : db.dropDatabase()
	
	* 删除集合 : db.collection.drop()
	* 查看集合 : show tables
	
6. 插入文档
	* 文档数据结构和json基本一致 {"":"" , "":""}
	* 向集合中插入文档 :  
		方法1：db.collection_name.insert({"":"" , "":""})
		方法2：先定义一个document , document_name=({name : "zs" , age : "12"}) , db.collection_name.insert(document_name)
	
	* 查询集合中的文档 : db.collection_name.find()
	* 更新文档 : db.col.save({"":""}) ,  如果指定_id字段，会覆盖原_id的document ，否则和insert一样

7. 更新文档
	* db.collection_name.update(
		<query>,
		<update>,
		{
			upsert: <boolean>,
			multi: <boolean>,
			writeConcern: <document>
		}
	)
	
	query : 查询条件
	update : 要更新的数据
	upsert : 不存在是否插入新document , 默认false
	multi : 是否更细全部 query匹配上的document , 默认false
	
	db.col.update({title: 'mongodbb'} , {$set:{title : 'MongDB'}} , {multi:true})
	db.col.update({title: 'mongodbb'} , {$set:{title : 'MongDB'}} , false , true)
	
	* db.collection_name.save() : 替换文档
	db.collection_name.save(
		<document>,
		{writeConcern: <document>}
	)
	writeConcern : 可选，抛出异常的级别

	
8. 删除document
	db.collection_name.remove(
		<query>,
		{
			justOne:<boolean>,
			writeConcern:<document>
		}
	)
	
	query : 条件
	justOne : 只删一个document, 默认false , true 或 1
	
	db.collection_name.remomve({}) : 删除所有document
	
	
9. 查询document

	* db.collection_name.find().pretty() : 格式化显示document
	
	* where 条件 :  find({"" : "", "" : ""})
		{"key“ : "value"}  : where key = value
		{"key" : {$lt|lte|gt|gte|ne : <value>} }  : where key < <= > >= != value
		AND 用多, 分隔 {"":"" , "":""} 
		OR : find({$or : [{"":""} , {"":""}]}) 
		
	* 例子 : db.col.find({"likes" : {$gt:50} , $or: [{name: "zhangsan"} , {age : 21} ] })	
			查找 likes > 50 and (name="zhangsan" or age = 21)
			
			
	* 只查document 中的某些 field字段 : 
		db.collection_name.find(
			{"key":"value"} , 
			{"key" : true / false/ 1 / 0}   --要查的字段
		)
		
	* find().limit(<number>)  : 查询document的数量
	* find().skip(<number>)  : 跳过若干条document , 默认0
	
		find().limit(1).skip(10) : 查第11条document
	
	* find().sort({key : 1}) : 排序 1 升序 、-1 降序
	
10. 条件操作符
	* $gt \ $gte \ $lt \ $lte  大于 大于等于 小于 小于等于
	* $type : 表示数据类型
	
		Double 					: 1
		String 					: 2
		Object 					: 3
		Array 					: 4
		Binary data				: 5
		Undefined 				: 6 废弃
		Object id 				: 7
		Boolean 				: 8
		Date 					: 9
		Null 					: 10
		Regular Expression 		: 11
		JavaScript 				: 13
		Symbol 					: 14
		JavaScript(with scope) 	: 15
		32-bit integer 			: 16
		Timestamp 				: 17
		64-bit integer 			: 18
		Min key 				: 255 query with -1
		Max key 				: 127
	
	
11. 索引
	* db.collection_name.ensureIndex({key : 1 , key2 : -1 ...} , {param : value})  :  为 key字段创建索引 1 为升序、 -1降序
	
	* 参数
	
	background			Boolean			建立索引是否阻塞其他数据库操作，默认false
	unique				Boolean			索引是否是唯一索引，默认false
	name				string			索引名，默认使用字段名和排序顺序组合
	dropDups			Boolean			在建立唯一索引时是否同时删掉重复记录，默认false
	sparse				Boolean			对文档中不存在的字段数据不启用索引，稀疏索引，存入null时不计入索引，意思是可以存多个null，默认false
	expireAfterSeconds	integer			设置集合生存时间，秒为单位
	v					index version	索引版本号，默认mongodb版本
	weights				document		索引权重值，在1-99,999
	default_language	string			对于文本索引，决定了停用词及词干和词器的规则的列表，默认英语
	language_override	string			对于文本索引，指定了包含在文档中的字段名，语言覆盖默认的language，默认为language
	
	db.values.ensureIndex({open: 1, close: 1}, {background: true})
	
12. 聚合	
	* db.collection_name.aggregate(OPERATION)
	
	* 聚合表达式
	$sum	计算总和。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}])
	$avg	计算平均值	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}])
	$min	获取集合中所有文档对应值得最小值。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}])
	$max	获取集合中所有文档对应值得最大值。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}])
	$push	在结果文档中插入值到一个数组中。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])
	$addToSet	在结果文档中插入值到一个数组中，但不创建副本。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])
	$first	根据资源文档的排序获取第一个文档数据。	db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])
	$last	根据资源文档的排序获取最后一个文档数据
	
	
	* 聚合框架常用操作：
	$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。
	$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。
	$limit：用来限制MongoDB聚合管道返回的文档数。
	$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
	$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
	$group：将集合中的文档分组，可用于统计结果。
	$sort：将输入文档排序后输出。
	$geoNear：输出接近某一地理位置的有序文档
	
	
	* 管道
	将命令的输出结果作为参数传给下一个命令
	
	例子：
	db.articles.aggregate( [
                        { $match : { score : { $gt : 70, $lte : 90 } } },
                        { $group: { _id: null, count: { $sum: 1 } } }
                       ] );
	$match用于获取分数大于70小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。
	
	
13. 副本集
	* 多个节点集群 
	* 任何节点可以作为主节点
	* 写入操作在主节点上
	* 故障转移
	* 自动恢复
	
	* 操作步骤
		1> 创建多个实例 ： mongod --port 27017 --dbpath "xxx" --replSet rs0 
		2> 创建副本集： 登录mongo rs.initiage() 启动一个副本集 , 查看配置 rs.conf() ， 查看状态 rs.status()
		3> 添加副本集： rs.add(HOST_NAME:PROT)
	
14. 分片
	另一种集群方式
	
	* 3个组件：
		1> Shard ： 存储数据的片，可由一个server或一个server组 replica set 承担
		2> Config Server :存储分片配置信息，chunk信息
		3> Query Routers : 路由端，可以是一个集群，客户直接访问对象
	
	* 将数据保存在多个Shard上，每个shard上又会分多个chunk存储数据，
	chunk的划分是根据COnfig Server上配置的片键决定的，片键种类，
	
	例子：
		1> 创建多个Shard :
		mongod --port 27020 --dbpath=/xxx/xxx/shard/s0 --logpath=/xxx/xxx/shard/log/s0.log --logappend --fork
		mongod --port 27030 --dbpath=/xxx/xxx/shard/s1 --logpath=/xxx/xxx/shard/log/s1.log --logappend --fork
		mongod --port 27040 --dbpath=/xxx/xxx/shard/s2 --logpath=/xxx/xxx/shard/log/s2.log --logappend --fork
		
		2> 启动Config Server :
		mongod --port 27100 --dbpath=/xxx/xxx/shard/config --logpath=/xxx/xxx/shard/log/config.log --logappend --fork
		
		3> 启动Route Process :
		mongos --port 40000 --configdb 127.0.0.1:27100 --fork --logpath=/xxx/xxx/shard/log/route.log --chunkSize 500
		指定路由使用的 config server地址，设置区块大小500MB
		
		4> 在Route Process 上操作 :
			添加Share
			mongos> db.runCommand({addshard:"127.0.0.1:27020"})
			db.runCommand({addshard:"127.0.0.1:27030"})
			db.runCommand({addshard:"127.0.0.1:27040"})
			
			对库启动分片
			db.runCommand({enablesharding:"DB_NAME"})
			
			设置分片保存的Collection集合 ，设置片键 
			db.runCommand({shardcollection : "DB_NAME.COLLCECTION_NAME" , key : {FIELD_NAME : pattern , FIELD_NAME2 : pattern}})
			pattern : 为1 ，或者hashed
			
			插入分片Collection 的document 不能没有 片键的FIELD_NAME
			
	* 推荐使用 Objectid作为片键
		
		
		