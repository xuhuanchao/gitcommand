### 算法：

1.  定义：算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作

2.  特性：输入、输出、有穷性、确定性、可行性
    1）输入输出有0或多个输入、至少一个输出；
    2）有穷性：算法在有限步骤完成，不会出现无限循环，每一步在可接受的时间内完成
    3）确定性：算法每一步都有确定的含义，没有二义性
    4）可行性：算法每一步都是可行的，通过执行有限次数完成

3.  算法设计要求
    1）正确性：有输入、输出和加工处理无歧义性，能正确反映问题的需求、得到正确答案。
    四个层次：
        a 没有语法错误
        b 对于合法输入能产生满足要求的输出结果
        c 对于非法输入能得出满足规格的说明结果
        d 对所有输入都有满足需要的输出
    2）可读性：方便阅读、理解和交流
    3）健壮性：输入不合法数据能做出相关处理，不会产生异常和莫名其妙的结果
    4）事件效率高和存储量低

4.  算法效率度量方法
    1）事后统计方法
    通过设计好的程序，利用计算机计时，比较时间长短
    缺陷：必须编写好程序，时间受计算机硬件和软件环境因素影响，算法测试数据设计困难数据规模影响算法时间。

    2）事前分析估算方法
    算法耗时主要取决的因素：
    a 算法采用的策略、方法
    b 编译产生的代码质量
    c 问题的输入规模
    d 机器执行指令的速度


    抛开机器和软件，效率主要由算法策略和输入规模决定
    例子： 1+2+3+...100

    算法1
    int i, sum=0, n=100         /* 1次 */
    for(i =1; i<n; i++){          n+1
        sun = sun+1;              n
    }
    printf("%d", sum);             1

    算法2
    int sum=0, n=100;           1
    sum = (1+n) * n/2;          1
    printf("%d", sum);          1

    算法3
    int i,j,x = 0, sum=0, n=100;        1
    for(i=1; i<=n; i++){
        for(j=1; j<=n; j++){
            x++;                        n*n
            sum = sum + x;
        }
    }
    printf("%d", sum);                  1

    忽略定义和打印只关注中间部分， 3个算法是n 与 1 \ n平方的差距
    f(n) = n, f(n) = 1, f(n) = n平方
    事件复杂度分别为：O(n), O(1), O(n^2)

    判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数

5.  时间复杂度
    T(n) = O(f(n))
    f(n)是问题规模n的某个函数，O()体现算法时间复杂度，随着n的增长T(n)增长最慢的算法为最优算法

    推导大O阶：
    1）用常数1取代运行时间中的所有加法常数
    2）在修改后的运行次数函数中，只保留最高阶项
    3）如果最高阶项存在且不是1，则去除与这个项相乘的常数


    1）常数阶
    int sum=0, n=100;       /* 执行1次 */
    sum = (1+n)*n/2;        /* 执行1次 */
    sum = (1+n)*n/2;        /* 执行1次 */
    sum = (1+n)*n/2;        /* 执行1次 */
    ......
    O(1\2\3\.....) 无论多少都记作O(1)

    2）线性阶
    int i;
    for(i =0; i<n; i++){
        时间复杂度为O(1)的操作步骤
    }
    时间复杂度为O(n)

    3）对数阶
    int count = 1;
    while(count < n){
        count = count * 2;
        时间复杂度为O(1)的步骤
    }
    有多少个2相乘大于n则退出循环，2^x = n , x=log2n
    O(logn)

    4）平方阶
    int i,j;
    for(i=0; i<n; i++){
        for(j=0; j<n; j++){
            O(1)...
        }
    }
    O(n^2)， 若2层循环次数不同则 O(m*n)


### 线性表

零个或多个数据元素的有限序列，每个元素类型一致，只有一个前驱和后继元素，元素之间关系是一对一关系

1.  线性表 顺序存储结构
    指用一段地址连续的存储单元依次存储线性表的数据元素














