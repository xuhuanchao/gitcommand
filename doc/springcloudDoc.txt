reverse proxy: 反向代理
client-side load balancing: 客户端负载均衡

boilerplate: 样板文件
detect: 发现、探测

circuit breakers: 断路器
intelligent routing: 智能路由
coordination: 协调
laptop: 笔记本电脑
out of box experience: 开箱体验
extensibility mechanism: 扩展机制
native: 本地的
encourage: 鼓励
continuous delivery: 持续交付
in the area: 在这个领域
adoption: 采用
a related discipline: 一个相关的科学
are aligned with delivery and operations goals: 在交付和操作目标上结盟
declarative programming: 声明式编程

Spring Cloud facilitates these styles of development in a number of specific ways and the starting point is a set of features that all components in a distributed system either need or need easy access to when required.

Spring Cloud 使用一些特定方式促进了这种开发风格，起点是分布式系统中的所有组件互相需要或者在需要时可以方便访问的一组特性。



https://cloud.spring.io/spring-cloud-static/Dalston.SR5/single/spring-cloud.html

Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.

Version: Dalston.SR5

翻译：
spring clound 提供了在分布式系统中可快速开发公用模型，例如配置管理、服务发现、断路器、智能路由、微服务代理、控制总线）。对等的分布式系统导向使用样本模式，而且使用spring cloud的开发者可以基于这些模式快速的构建服务和应用。它们可以很好的运行在任何分布式系统中，包括开发者自己的笔记本电脑，没有操作系统的数据中心和管理平台如云平台



1. Features
Spring Cloud focuses on providing good out of box experience for typical use cases and extensibility mechanism to cover others.

* Distributed/versioned configuration
* Service registration and discovery
* Routing
* Service-to-service calls
* Load balancing
* Circuit Breakers
* Distributed messaging

翻译：
1. spring cloud 为了覆盖其他产品，专注于为典型的案例提供更良好的开箱即用体验和扩展机制

* 分布式/版本配置
* 服务注册发现
* 路由
* 服务到服务的调用
* 负载均衡
* 断路器（熔断器）
* 分布式消息


Part I. Cloud Native Applications
Cloud Native is a style of application development that encourages easy adoption of best practices in the areas of continuous delivery and value-driven development. A related discipline is that of building 12-factor Apps in which development practices are aligned with delivery and operations goals, for instance by using declarative programming and management and monitoring. Spring Cloud facilitates these styles of development in a number of specific ways and the starting point is a set of features that all components in a distributed system either need or need easy access to when required.

Many of those features are covered by Spring Boot, which we build on in Spring Cloud. Some more are delivered by Spring Cloud as two libraries: Spring Cloud Context and Spring Cloud Commons. Spring Cloud Context provides utilities and special services for the ApplicationContext of a Spring Cloud application (bootstrap context, encryption, refresh scope and environment endpoints). Spring Cloud Commons is a set of abstractions and common classes used in different Spring Cloud implementations (eg. Spring Cloud Netflix vs. Spring Cloud Consul).

If you are getting an exception due to "Illegal key size" and you are using Sun’s JDK, you need to install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files. See the following links for more information:



翻译：
Part I. 云本地应用
云本地应用是一种鼓励简单采用在持续交付和价值驱动范围内最佳实践的应用开发风格。一个相关的学科是在交付和操作目标上结盟的构建有12因子的应用，实例是使用声明进行编程挂你和监控。spring cloud以许多特殊方式促进了这些开发风格，起点是一组在分布式系统中的所有组件要么全部是必须的要么当它们需要时可以方便的互相访问的特性。

这些特性中许多都被我们构建在Spring Colud上的Spring Boot覆盖了。一些其他的被Spring Cloud以2个库来交付。Spring Clound Context和Spring Cloud Commons。spring cloud context库为spring cloud 应用的应用程序上下文提供了使用工具和特殊服务（例如：bootstrap 上下文，加密术，刷新作用域和环境端点）。spring cloud commons 库是一个用来在不同spring cloud实现中被实现的一组抽象的和公用的类（例如：spring cloud netflix 和 psirng cloud consul的实现）

如果你得到了"Illegal key size"异常并且在使用sun的jdk，你需要安装java 密码扩展 JCE的无线力量权利政策文件。



2. Spring Cloud Context: Application Context Services
Spring Boot has an opinionated view of how to build an application with Spring: for instance it has conventional locations for common configuration file, and endpoints for common management and monitoring tasks. Spring Cloud builds on top of that and adds a few features that probably all components in a system would use or occasionally need.


翻译：
spring boot 有自己的关于构建审spring应用的方式，实例：使用传统位置放置通用配置文件，和提供通用管理和监控任务的端点。spring cloud在其之上构建并且添加了一个些在组件中可能会使用或偶尔需要的特性。



2.1 The Bootstrap Application Context
A Spring Cloud application operates by creating a "bootstrap" context, which is a parent context for the main application. Out of the box it is responsible for loading configuration properties from the external sources, and also decrypting properties in the local external configuration files. The two contexts share an Environment which is the source of external properties for any Spring application. Bootstrap properties are added with high precedence, so they cannot be overridden by local configuration, by default.

The bootstrap context uses a different convention for locating external configuration than the main application context, so instead of application.yml (or .properties) you use bootstrap.yml, keeping the external configuration for bootstrap and main context nicely separate. Example:

bootstrap.yml. 

spring:
  application:
    name: foo
  cloud:
    config:
      uri: ${SPRING_CONFIG_URI:http://localhost:8888}
It is a good idea to set the spring.application.name (in bootstrap.yml or application.yml) if your application needs any application-specific configuration from the server.

You can disable the bootstrap process completely by setting spring.cloud.bootstrap.enabled=false (e.g. in System properties).

翻译：
一个spring cloud 应用通过创建"bootstrap"上下文运转，"bootstrap"是一个主应用的父上下文。开箱即用是它可以从外部资源读取配置文件和从本地外部配置文件解谜属性的原因。任意spring应用的两个上下文共享一个做为外部配置属性来源的环境。 bootstrap 的配置属性有更高的优先级，所以默认情况下不会被本地配置覆盖。

bootstrap 上下文使用与主应用上下文不同的约定来定位外部配置，所以使用bootstrap.yml替代appliaction.yml，保持外部配置使用boostrap和主上下文完美隔离。

使用spring.application.name设置一个应用名称是一个好主意，如果你的应用需要从服务器上获取任何特殊配置

可以使用spring.cloud.bootstrap.enabled=false禁用bootstrap



2.2 Application Context Hierarchies
If you build an application context from SpringApplication or SpringApplicationBuilder, then the Bootstrap context is added as a parent to that context. It is a feature of Spring that child contexts inherit property sources and profiles from their parent, so the "main" application context will contain additional property sources, compared to building the same context without Spring Cloud Config. The additional property sources are:

* "bootstrap": an optional CompositePropertySource appears with high priority if any PropertySourceLocators are found in the Bootstrap context, and they have non-empty properties. An example would be properties from the Spring Cloud Config Server. See below for instructions on how to customize the contents of this property source.

* "applicationConfig: [classpath:bootstrap.yml]" (and friends if Spring profiles are active). If you have a bootstrap.yml (or properties) then those properties are used to configure the Bootstrap context, and then they get added to the child context when its parent is set. They have lower precedence than the application.yml (or properties) and any other property sources that are added to the child as a normal part of the process of creating a Spring Boot application. See below for instructions on how to customize the contents of these property sources.

Because of the ordering rules of property sources the "bootstrap" entries take precedence, but note that these do not contain any data from bootstrap.yml, which has very low precedence, but can be used to set defaults.

You can extend the context hierarchy by simply setting the parent context of any ApplicationContext you create, e.g. using its own interface, or with the SpringApplicationBuilder convenience methods (parent(), child() and sibling()). The bootstrap context will be the parent of the most senior ancestor that you create yourself. Every context in the hierarchy will have its own "bootstrap" property source (possibly empty) to avoid promoting values inadvertently from parents down to their descendants. Every context in the hierarchy can also (in principle) have a different spring.application.name and hence a different remote property source if there is a Config Server. Normal Spring application context behaviour rules apply to property resolution: properties from a child context override those in the parent, by name and also by property source name (if the child has a property source with the same name as the parent, the one from the parent is not included in the child).

Note that the SpringApplicationBuilder allows you to share an Environment amongst the whole hierarchy, but that is not the default. Thus, sibling contexts in particular do not need to have the same profiles or property sources, even though they will share common things with their parent.

翻译：
如果通过SpringApplication或SpringApplicationBuilder创建应用上下文，那么bootstrap上下文会做为父上下文附加进来。这是一个spring的特性，子上下文继承府上下文的属性资源和个人配置，所以主应用上下文会包含额外的属性资源，相比较同样的上下文没有使用spring cloud config。 附件的属性资源是：

* "bootstrap": 在boostrap上下文中如果有任何属性资源定位器发现了非空的可选复合属性资源，那么它会以较高优先级出现在boostrap中。例如，从spring cloud config 服务上获得属性配置。 如何客户化这些属性资源内容，可以看介绍。

* "applicationConfig: [classpath:bootstrap.yml]":  (和其他被spring支持的配置)。如果有bootstrap.yml(或properties)那么这些属性会被使用到bootstrap的上下文，然后当它的父上下文被设置时，它们会条件到子上下文。 它们比application.yml(或properties)和其他创建spring boot应用进程中做为普通部分被添加到子上下文的属性资源有更低的优先级。

因为属性资源的顺序规则，bootstrap优先进入，但是注意优先级较低的bootstrap.yml没有包含任何数据，但可用来设置默认值。

你可以扩展上下文层级通过简单设置你创建的父上下文。例如，使用自定义的接口或者使用SpringApplicationBuilder的方法（parent(), child() and sibling()）。bootstrap上下文将是所有你创建的最高级祖先的父上下文。在层级中的每一个上下文都有自己的"bootstrap"属性资源（可能为空）为了避免无意的从父上下文提升值到子上下文中。层级中每个上下文原则上可以有一个不同的spring.application.name并且因此如果有config server的话会有不同的远端属性文件。正常情况spring 应用上下文行为规则提供了属性解决方案：子上下文的属性会覆盖父上下文的同样属性，通过属性名字或者属性资源名（如果子上下文有一个属性资源和父上下文的属性资源有相同的名字，父上下文资源文件不会进入到子上下文）。

注意SpringApplicationBuilder允许你在全部层级之间共享一个环境，但是这不是默认的。因此在个别项目中兄弟上下文不需要有相同的个人配置和属性资源，及时它们通过父上下文共享相同的东西。



2.3 Changing the Location of Bootstrap Properties
The bootstrap.yml (or .properties) location can be specified using spring.cloud.bootstrap.name (default "bootstrap") or spring.cloud.bootstrap.location (default empty), e.g. in System properties. Those properties behave like the spring.config.* variants with the same name, in fact they are used to set up the bootstrap ApplicationContext by setting those properties in its Environment. If there is an active profile (from spring.profiles.active or through the Environment API in the context you are building) then properties in that profile will be loaded as well, just like in a regular Spring Boot app, e.g. from bootstrap-development.properties for a "development" profile.


翻译：
2.3 改变boostrap属性文件的位置


















